version: "2"
services:
  #region Fn Project - Docker powered FaaS provider.
  fn:
    image: fnproject/fnserver:latest
    container_name: fn-server
    restart: always
    networks:
      - default
      - traefik_proxy
    command: ./fnserver
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fn-server.entrypoints=websecure"
      - "traefik.http.routers.fn-server.middlewares=fn-server-whitelist"
      - "traefik.http.routers.fn-server.rule=Host(`fn-server.${DOMAIN_NAME}`)"
      - "traefik.http.routers.fn-server.tls.certresolver=mydnschallenge"
      - "traefik.http.services.fn-server.loadbalancer.server.port=8080"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.middlewares.fn-server-whitelist.ipwhitelist.sourcerange=${IP_WHITELIST}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/iofs:/iofs
      - ${DOCKER_DIR}/data:/app/data
    environment:
      - FN_IOFS_PATH=/iofs
      - FN_IOFS_DOCKER_PATH=${DOCKER_DIR}/iofs
  fn-ui:
    image: fnproject/ui:latest
    container_name: fn-ui
    restart: always
    networks:
      - default
      - traefik_proxy
    links:
      - fn
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fn-ui.entrypoints=websecure"
      - "traefik.http.routers.fn-ui.middlewares=fn-ui-whitelist"
      - "traefik.http.routers.fn-ui.rule=Host(`fn.${DOMAIN_NAME}`)"
      - "traefik.http.routers.fn-ui.tls.certresolver=mydnschallenge"
      - "traefik.http.services.fn-ui.loadbalancer.server.port=4000"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.middlewares.fn-ui-whitelist.ipwhitelist.sourcerange=${IP_WHITELIST}"
    environment:
      - FN_API_URL=http://fn:8080

#endregion
networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge
